{"name":"Regexgen.js","tagline":"RegexGen.js is a JavaScript Regular Expression Generator that helps to construct complex regular expressions.","body":"# RegexGen.js - JavaScript Regular Expression Generator\r\n\r\n[RegexGen.js](https://github.com/amobiz/regexgen.js) is a JavaScript regular expression generator that helps to construct complex regular expressions, inspired by [JSVerbalExpressions](https://github.com/VerbalExpressions/JSVerbalExpressions).\r\n\r\nRegexGen.js is basically designed for people who know how the regular expression engine works, but not working with it regularly, i.e., they know how to make the regex works but may not remember every meta-characters that constructs the regex.\r\n\r\nRegexGen.js helps people don't have to remember: meta-characters, shortcuts, what characters to escape and tricks about corner cases (http://stackoverflow.com/questions/5484084/what-literal-characters-should-be-escaped-in-a-regex/5484178#5484178).\r\n\r\nRegexGen.js helps reusing regex patterns. (checkout the [Matching an IP Address] example bellow.)\r\n\r\n## The Problems\r\n\r\nRegexGen.js tries to ease two problems.\r\n\r\n1. While creating a regular expression, it's hard to remember the correct syntax and what characters to escape.\r\n2. After done creating a regular expression, it's hard to read and remember what the regex do.\r\n\r\n## The Goals\r\n\r\nRegexGen.js is designed to achieve the following goals.\r\n\r\n1. The written codes should be easy to read and easy to understand.\r\n2. The generated code should be as compact as possible, e.g., no redundant brackets and parentheses.\r\n3. No more character escaping reguired (except '\\\\', or if you use regex overwrite.)\r\n4. If the generated code is not good enougth, bad parts can be easily replaced directly in the written codes.\r\n\r\n## Getting Started\r\n\r\nThe generator is exported as a `regexGen()` function.\r\n\r\nTo generate a regular expression, pass sub-expressions as parameters to the `regexGen()` function.\r\n\r\nSub-expressions as parameters which are separated by comma are concatenated together to form the whole regular expression.\r\n\r\nSub-expressions can either be a `string`, a `number`, a `RegExp` object, or any values generated by the owned functions of the `regexGen()` function object, i.e., the `regex-generator()` as the following informal [BNF](http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form) syntax.\r\n\r\nStrings passed into the `regexGen()`, the `text()`, the `maybe()`, the `anyCharOf()` and the `anyCharBut()` functions, are always escaped as necessary, so you don't have to worry about which characters to escape.\r\n\r\nThe result of calling the `regexGen()` function is a `RegExp` object.\r\n\r\nThe basic usage can be expressed as the following informal [BNF](http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form) syntax.\r\n\r\n```\r\nRegExp object = regexGen( sub-expression [, sub-expression ...] [, modifier ...] )\r\n\r\nsub-expression ::= string | number | RegExp object | term\r\n\r\nterm ::= regex-generator() [.term-quantifier()] [.term-lookahead()]\r\n\r\nregex-generator() ::= regexGen.startOfLine() | regexGen.endOfLine()\r\n    | regexGen.wordBoundary() | regexGen.nonWordBoundary()\r\n    | regexGen.text() | regexGen.maybe() | regexGen.anyChar() | regexGen.anyCharOf() | regexGen.anyCharBut()\r\n    | regexGen.either() | regexGen.group() | regexGen.capture() | regexGen.sameAs()\r\n    | regex() | ... (see regexGen.js for all termGenerator()s.)\r\n\r\nterm-quantifier() ::= .term-quantifier-generator() [.term-quantifier-modifier()]\r\n\r\nterm-quantifier-generator() ::= term.any() | term.many() | term.maybe() | term.repeat() | term.multiple()\r\n\r\nterm-quantifier-modifier() ::= term.greedy() | term.lazy() | term.reluctant()\r\n\r\nterm-lookahead() ::= term.contains() | term.notContains() | term.followedBy() | term.notFollowedBy()\r\n\r\nmodifier ::= regexGen.ignoreCase() | regexGen.searchAll() | regexGen.searchMultiLine()\r\n```\r\n\r\nPlease check out [regexgen.js](app/scripts/regexgen.js) and [wiki](https://github.com/amobiz/regexgen.js/wiki) for API documentations, and check out [test.js](test/spec/test.js) for more examples.\r\n\r\n## Installation\r\n\r\nIf your are managing package dependencies with [bower](http://bower.io/), your can install RegexGen.js using bower install command.\r\n\r\n    bower install git://github.com/amobiz/regexgen.js.git\r\n\r\nOr you can just download the `regexgen.js` or `regexgen.min.js`, and put it to where your scripts located in your project.\r\n\r\n## Usage\r\n\r\n### The good hard (but safe) way\r\n\r\nSince the generator is exported as the `regexGen()` function.\r\nEverything must be referenced from it.\r\nTo simplify the code, assign it to a short variable is preferable.\r\n\r\n```\r\nvar _ = regexGen;\r\n\r\nvar regex = regexGen(\r\n    _.startOfLine(),\r\n    _.capture( 'http', _.maybe( 's' ) ), '://',\r\n    _.capture( _.anyCharBut( ':/' ).repeat() ),\r\n    _.group( ':', _.capture( _.digital().multiple(2,4) ) ).maybe(), '/',\r\n    _.capture( _.anything() ),\r\n    _.endOfLine()\r\n);\r\nvar matches = regex.exec( url );\r\n```\r\n\r\n### Mixin to global object (pollute the global)\r\n\r\nIf you still feel inconvenient, and don't mind the global object being polluted,\r\nuse the `regexGen.mixin()` function to export all member functions of the `regexGen()` function object to the global object.\r\n\r\n```\r\nregexGen.mixin( window );\r\n\r\nvar regex = regexGen(\r\n    startOfLine(),\r\n    capture( 'http', maybe( 's' ) ), '://',\r\n    capture( anyCharBut( ':/' ).repeat() ),\r\n    group( ':', capture( digital().multiple(2,4) ) ).maybe(), '/',\r\n    capture( anything() ),\r\n    endOfLine()\r\n);\r\nvar matches = regex.exec( url );\r\n```\r\n\r\n### Use the **with** keyword (not recommended)\r\n\r\nOr, if you don't use the strict mode with `use strict` keyword,\r\nyou can use the `with` keyword (though not recommended) to refer to all member functions of the `regexGen()` function object.\r\n\r\n```\r\nwith( regexGen ) {\r\n    var regex = regexGen(\r\n        startOfLine(),\r\n        capture( 'http', maybe( 's' ) ), '://',\r\n        capture( anyCharBut( ':/' ).repeat() ),\r\n        group( ':', capture( digital().multiple(2,4) ) ).maybe(), '/',\r\n        capture( anything() ),\r\n        endOfLine()\r\n    );\r\n    var matches = regex.exec( url );\r\n}\r\n```\r\n\r\n## Examples\r\n\r\n#### Simple Password Validation\r\n\r\nThis example is taken from the article: [Mastering Lookahead and Lookbehind](http://www.rexegg.com/regex-lookarounds.html).\r\n\r\n```\r\nregexGen.mixin( window );\r\nvar regex = regexGen(\r\n    // Anchor: the beginning of the string\r\n    startOfLine(),\r\n    // Match: six to ten word characters\r\n    word().multiple(6,10).\r\n        // Look ahead: anything, then a lower-case letter\r\n        contains( anything().reluctant(), anyCharOf(['a','z']) ).\r\n        // Look ahead: anything, then an upper-case letter\r\n        contains( anything().reluctant(), anyCharOf(['A','Z']) ).\r\n        // Look ahead: anything, then one digit\r\n        contains( anything().reluctant(), digital() ),\r\n    // Anchor: the end of the string\r\n    endOfLine()\r\n);\r\n```\r\nGenerates:\r\n```\r\n/^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?\\d)\\w{6,10}$/\r\n```\r\n\r\n#### Matching an IP Address\r\n\r\nThis example is taken from the book: [Mastering Regular Expressions](http://books.google.com.tw/books?id=sshKXlr32-AC&pg=PA187&lpg=PA187&dq=mastering+regular+expression+Matching+an+IP+Address&source=bl&ots=daK_ZPacNh&sig=l9eFfP2WvXWkTw_jYPQHSrxEO4Q&hl=zh-TW&sa=X&ei=z3KxU5blK43KkwXdiIGQDQ&ved=0CDcQ6AEwAg#v=onepage&q=mastering%20regular%20expression%20Matching%20an%20IP%20Address&f=false)\r\n\r\n```\r\nregexGen.mixin( window );\r\nvar d1 = group( anyCharOf( '0', '1' ).maybe(), digital(), digital().maybe() );\r\nvar d2 = group( '2', anyCharOf( ['0', '4'] ), digital() );\r\nvar d3 = group( '25', anyCharOf( ['0', '5'] ) );\r\nvar d255 = capture( either( d1, d2, d3 ) );\r\nvar regex = regexGen(\r\n    startOfLine(),\r\n    d255, '.', d255, '.', d255, '.', d255,\r\n    endOfLine()\r\n);\r\n```\r\nGenerates:\r\n```\r\n/^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$/\r\n```\r\n\r\n#### Matching Balanced Sets of Parentheses\r\n\r\nThis example is taken from the book: [Mastering Regular Expressions](http://books.google.com.tw/books?id=sshKXlr32-AC&pg=PA193&lpg=PA193&dq=mastering+regular+expression+Matching+Balanced+Sets+of+Parentheses&source=bl&ots=daK_ZPaeHl&sig=gBcTaTIWQh-9_HSuINjQYHpFn7E&hl=zh-TW&sa=X&ei=YHOxU5_WCIzvkgX-nYHQAw&ved=0CBsQ6AEwAA#v=onepage&q=mastering%20regular%20expression%20Matching%20Balanced%20Sets%20of%20Parentheses&f=false)\r\n\r\n```\r\nregexGen.mixin( window );\r\nvar regex = regexGen(\r\n    '(',\r\n    anyCharBut( '()' ).any(),\r\n    group(\r\n        '(',\r\n        anyCharBut( '()' ).any(),\r\n        ')',\r\n        anyCharBut( '()' ).any()\r\n    ).any(),\r\n    ')'\r\n);\r\n```\r\nGenerates:\r\n```\r\n/\\([^()]*(?:\\([^()]*\\)[^()]*)*\\)/\r\n```\r\n\r\n#### Matching Balanced Sets of Parentheses within Any Given Levels of Depth\r\n\r\nThis example is taken from the book: [Mastering Regular Expressions](http://books.google.com.tw/books?id=sshKXlr32-AC&pg=PA193&lpg=PA193&dq=mastering+regular+expression+Matching+Balanced+Sets+of+Parentheses&source=bl&ots=daK_ZPaeHl&sig=gBcTaTIWQh-9_HSuINjQYHpFn7E&hl=zh-TW&sa=X&ei=YHOxU5_WCIzvkgX-nYHQAw&ved=0CBsQ6AEwAA#v=onepage&q=mastering%20regular%20expression%20Matching%20Balanced%20Sets%20of%20Parentheses&f=false)\r\n```\r\nregexGen.mixin( window );\r\nfunction nestingParentheses( level ) {\r\n    if ( level < 0 ) {\r\n        return '';\r\n    }\r\n    if ( level === 0 ) {\r\n        return anyCharBut( '()' ).any();\r\n    }\r\n    return either(\r\n            anyCharBut( '()' ),\r\n            group(\r\n                '(',\r\n                nestingParentheses( level - 1 ),\r\n                ')'\r\n            )\r\n        ).any();\r\n}\r\n```\r\nGiven 1 level of nesting:\r\n```\r\nvar regex = regexGen(\r\n    '(', nestingParentheses( 1 ), ')'\r\n);\r\n```\r\nGenerates:\r\n```\r\n/\\((?:[^()]|\\([^()]*\\))*\\)/\r\n```\r\nGiven 3 levels of nesting:\r\n```\r\nvar regex = regexGen(\r\n    '(', nestingParentheses( 3 ), ')'\r\n);\r\n```\r\nGenerates:\r\n```\r\n/\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))*\\))*\\)/\r\n```\r\n\r\n\r\n#### Matching an HTML Tag\r\n\r\nThis example is taken from the book: [Mastering Regular Expressions](http://books.google.com.tw/books?id=GX3w_18-JegC&pg=PA200&lpg=PA200&dq=mastering+regular+expression+Matching+an+HTML+Tag&source=bl&ots=PJkiMpkrNX&sig=BiKB6kD_1ZudZw9g-VY-X-E-ylg&hl=zh-TW&sa=X&ei=y3OxU_uEIoPPkwXL3IHQCg&ved=0CFcQ6AEwBg#v=onepage&q=mastering%20regular%20expression%20Matching%20an%20HTML%20Tag&f=false)\r\n```\r\nregexGen.mixin( window );\r\nvar regex = regexGen(\r\n    '<',\r\n    either(\r\n        group( '\"', anyCharBut('\"').any(), '\"' ),\r\n        group( \"'\", anyCharBut(\"'\").any(), \"'\" ),\r\n        group( anyCharBut( '\"', \"'\", '>' ) )\r\n    ).any(),\r\n    '>'\r\n);\r\n```\r\nGenerates:\r\n```\r\n/<(?:\"[^\"]*\"|'[^']*'|[^\"'>])*>/\r\n```\r\n\r\n#### Matching an HTML Link\r\n\r\nThis example is taken from the book: [Mastering Regular Expressions](http://books.google.com.tw/books?id=GX3w_18-JegC&pg=PA201&dq=mastering+regular+expression+Matching+an+HTML+Link&hl=zh-TW&sa=X&ei=QnSxU4W-CMLkkAWLjIDgCg&ved=0CBwQ6AEwAA#v=onepage&q=mastering%20regular%20expression%20Matching%20an%20HTML%20Link&f=false)\r\n```\r\nregexGen.mixin( window );\r\nvar regexLink = regexGen(\r\n    '<a',\r\n    wordBoundary(),\r\n    capture(\r\n        anyCharBut( '>' ).many()\r\n    ),\r\n    '>',\r\n    capture(\r\n        label( 'Link' ),\r\n        anything().lazy()\r\n    ),\r\n    '</a>',\r\n    ignoreCase(),\r\n    searchAll()\r\n);\r\nvar regexUrl = regexGen(\r\n    wordBoundary(),\r\n    'href',\r\n    space().any(), '=', space().any(),\r\n    either(\r\n        group( '\"', capture( anyCharBut( '\"' ).any() ), '\"' ),\r\n        group( \"'\", capture( anyCharBut( \"'\" ).any() ), \"'\" ),\r\n        capture( anyCharBut( \"'\", '\"', '>', space() ).many() )\r\n    ),\r\n    ignoreCase()\r\n);\r\n```\r\nGenerates:\r\n```\r\n/<a\\b([^>]+)>(.*?)<\\/a>/gi\r\n/\\bhref\\s*=\\s*(?:\"([^\"]*)\"|'([^']*)'|([^'\">\\s]+))/i\r\n```\r\nHere's how to iterate all links:\r\n```\r\nvar capture, guts, link, url, html = document.documentElement.outerHTML;\r\nwhile ( (capture = regexLink.exec( html )) ) {\r\n    guts = capture[ 1 ];\r\n    link = capture[ 2 ];\r\n    if ( (capture = regexUrl.exec( guts )) ) {\r\n        url = capture[ 1 ] || capture[ 2 ] || capture[ 3 ];\r\n    }\r\n    console.log( url + ' with link text: ' + link );\r\n}\r\n```\r\n\r\n#### Examining an HTTP URL\r\n\r\nThis example is taken from the book: [Mastering Regular Expressions](http://books.google.com.tw/books?id=GX3w_18-JegC&pg=PA203&dq=mastering+regular+expression+Examining+an+HTTP+URL&hl=zh-TW&sa=X&ei=b3SxU9nUNojOkwXpjIDYCA&ved=0CBwQ6AEwAA#v=onepage&q=mastering%20regular%20expression%20Examining%20an%20HTTP%20URL&f=false)\r\n```\r\nregexGen.mixin( window );\r\nvar regex = regexGen(\r\n    startOfLine(),\r\n    'http', maybe( 's' ), '://',\r\n    capture( anyCharBut( '/:' ).many() ),\r\n    group( ':', capture( digital().many() ) ).maybe(),\r\n    capture( '/', anything() ).maybe(),\r\n    endOfLine()\r\n);\r\n```\r\nGenerates:\r\n```\r\n/^https?:\\/\\/([^/:]+)(?::(\\d+))?(\\/.*)?$/\r\n```\r\nHere's a snippet to report about a URL:\r\n```\r\nvar capture = location.href.match( regex );\r\nvar host = capture[1];\r\nvar port = capture[2] || 80;\r\nvar path = capture[3] || '/';\r\nconsole.log( 'host:' + host + ', port:' + port + ', path:' + path );\r\n```\r\n\r\n#### Validating a Hostname\r\n\r\nThis example is taken from the book: [Mastering Regular Expressions](http://books.google.com.tw/books?id=GX3w_18-JegC&pg=PA203&dq=mastering+regular+expression+Validating+a+Hostname&hl=zh-TW&sa=X&ei=hXSxU5nlKceIkQXc7YHgCA&ved=0CBwQ6AEwAA#v=onepage&q=mastering%20regular%20expression%20Validating%20a%20Hostname&f=false)\r\n```\r\nregexGen.mixin( window );\r\nvar regex = regexGen(\r\n    startOfLine(),\r\n    // One or more dot-separated parts . . .\r\n    either(\r\n        group(\r\n            anyCharOf( ['a', 'z'], ['0', '9'] ),\r\n            '.'\r\n        ),\r\n        group(\r\n            anyCharOf( ['a', 'z'], ['0', '9'] ),\r\n            anyCharOf( '-', ['a', 'z'], ['0', '9'] ).multiple( 0, 61 ),\r\n            anyCharOf( ['a', 'z'], ['0', '9'] ),\r\n            '.'\r\n        )\r\n    ).any(),\r\n    // Followed by the final suffix part . . .\r\n    either(\r\n        'com', 'edu', 'gov', 'int', 'mil', 'net', 'org', 'biz', 'info', 'name', 'museum', 'coop', 'aero',\r\n        group( anyCharOf( ['a', 'z'] ), anyCharOf( ['a', 'z'] ) )\r\n    ),\r\n    endOfLine()\r\n);\r\n```\r\nGenerates:\r\n```\r\n/^(?:[a-z0-9]\\.|[a-z0-9][-a-z0-9]{0,61}[a-z0-9]\\.)*(?:com|edu|gov|int|mil|net|org|biz|info|name|museum|coop|aero|[a-z][a-z])$/\r\n```\r\n\r\n#### Parsing CSV Files\r\n\r\nThis example is taken from the book: [Mastering Regular Expressions](http://books.google.com.tw/books?id=GX3w_18-JegC&pg=PA271&dq=Unrolling+the+CSV+regex&hl=zh-TW&sa=X&ei=x_q0U-qhD43jkAWYqoCgBA&ved=0CBwQ6AEwAA#v=onepage&q=Unrolling%20the%20CSV%20regex&f=false)\r\n```\r\nregexGen.mixin( window );\r\nvar regex = regexGen(\r\n    either( startOfLine(), ',' ),\r\n    either(\r\n        // Either a double-quoted field (with \"\" for each \")\r\n        group(\r\n            // double-quoted field's opening quote\r\n            '\"',\r\n            capture(\r\n                anyCharBut( '\"' ).any(),\r\n                group(\r\n                    '\"\"',\r\n                    anyCharBut( '\"' ).any()\r\n                ).any()\r\n            ),\r\n            // double-quoted field's closing quote\r\n            '\"'\r\n        ),\r\n        // Or some non-quote/non-comma text....\r\n        capture(\r\n            anyCharBut( '\",' ).any()\r\n        )\r\n    )\r\n);\r\n```\r\nGenerates:\r\n```\r\n/(?:^|,)(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|([^\",]*))/\r\n```\r\n\r\n\r\n## Author\r\n\r\n  * [Amobiz](https://github.com/amobiz)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}